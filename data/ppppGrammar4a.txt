RULE ADD_MORE_PROBLEMS 0.5 1.0 -1 complexity
    PATTERN A:problem()
    REPLACEMENT A:problem(),B:problem()
RULE SUBPROBLEMS 0.4 0.8 -1
    PATTERN A:problem()
    REPLACEMENT A:subproblem(),AA:situation_abst(),AAA:{start_point}(to:AAAA,partOf:A,has:E),AAAA:track(to:B),B:{track}(is:B_,partOf:A,partOf:AA),C:{track}(is:C_,partOf:A,partOf:AA,to:D),B_:out(),C_:in(),D:{end_point}(partOf:A),E:thread()
RULE MAKE_SUBPROBLEM_ABST_SERIAL_TASKS 0.8 0.5 -1 serial_tasks
    PATTERN A:subproblem(),AA:situation_abst(),\
    B:{track}(is:B_,partOf:A,partOf:AA),C:{track}(is:C_,partOf:A,partOf:AA),B_:out(),C_:in()
    REPLACEMENT A:subproblem(),AA:situation_abst(),AB:situation_abst(),B:{track}(is:B_,partOf:A,partOf:AA),C:{track}(is:C_,partOf:A,partOf:AB),B_:out(),C_:in(),\
    I:{track}(is:I_,partOf:AA,partOf:A,to:J),I_:in(),J:{track}(is:J_,partOf:AB,partOf:A),J_:out()
RULE MAKE_SUBPROBLEM_ABST_PARALLEL_TASKS 0.8 0.5 -1 parallel_tasks,mutual_exclusion
    PATTERN A:subproblem(),AA:situation_abst(),B:{track}(is:B_,partOf:A,partOf:AA),C:{track}(is:C_,partOf:A,partOf:AA),B_:out(),C_:in()
    REPLACEMENT A:subproblem(),AA:situation_abst(),AB:situation_abst(),B:{fork}(to:I,to:J),C:{merge}(partOf:B),\
    I:track(is:I_,partOf:A,partOf:AA),J:track(is:J_,partOf:A,partOf:AB),K:track(is:K_,to:C,partOf:A,partOf:AA),L:track(is:L_,to:C,partOf:A,partOf:AB),\
    I_:out(),J_:out(),K_:in(),L_:in()